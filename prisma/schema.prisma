generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  Cultural
  Adventure 
  Historical
  Culinary
  Beach
  Ski
  Eco
  Religious
  Shopping
  Wellness
  Photography
  Weekend
  International
  Domestic
}

model Location {
  id       Int       @id @default(autoincrement())
  name     String
  country  String
  packages Package[]
}

model Package {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Float
  salePrice   Float?        // Sale price (optional)
  duration    String
  startDate   DateTime?     // Start date of the package
  endDate     DateTime?     // End date of the package
  maxPeople   Int
  category    Category      // Using enum instead of relation
  popular     Boolean       @default(false)
  byBus       Boolean       @default(false) // Added field
  byPlane     Boolean       @default(false) // Added field

  location   Location       @relation(fields: [locationId], references: [id])
  locationId Int
  gallery    GalleryImage[]
  bookings   Booking[]
  tourPlan   TourDay[]      // Tour plan/itinerary

  includedItems    IncludedItem[]
  notIncludedItems NotIncludedItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GalleryImage {
  id        Int      @id @default(autoincrement())
  url       String
  package   Package  @relation(fields: [packageId], references: [id])
  packageId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id           Int       @id @default(autoincrement())
  package      Package   @relation(fields: [packageId], references: [id])
  packageId    Int
  name         String
  email        String
  phone        String?
  idNumber     String    // Personal ID number (piradobis nomeri)
  adults       Int
  children     Int
  date         DateTime
  totalPrice   Float
  discount     Discount? @relation(fields: [discountId], references: [id])
  discountId   Int?
  createdAt    DateTime  @default(now())
}

model Discount {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  amount    Float
  expiresAt DateTime
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model TourDay {
  id          Int      @id @default(autoincrement())
  dayNumber   Int      // Day number (1, 2, 3, etc.)
  title       String   // Day title (e.g., "Arrival & Old City Exploration")
  activities  String[] // Activities as array of strings
  package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([packageId, dayNumber]) // Ensure unique day numbers per package
}

model IncludedItem {
  id        Int      @id @default(autoincrement())
  text      String
  package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NotIncludedItem {
  id        Int      @id @default(autoincrement())
  text      String
  package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
